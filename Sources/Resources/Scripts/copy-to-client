#!/bin/sh

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Created by Sam Deane on 23/06/2020.
#  All code (c) 2020 - present day, Elegant Chaos Limited.
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

set -euo pipefail  # (add an x to flags to enable debugging)

# We will need xcpretty for the upload scripts, might as well install it now.

if [[ "$(which xcpretty)" == "" ]]
then
    $RT_LOG "Installing xcpretty."
    SCRIPT="$BUILT_PRODUCTS_DIR/ReleaseTools_Resources.bundle/Contents/Resources/Scripts/install-xcpretty"
    osascript -e "do shell script \"$SCRIPT\" with administrator privileges"
fi

# Copy the xcconfig files from the Resources bundle into the client project.
# These currently have to live in the client because it uses them before it starts
# building, and so there is a bootstrap problem.
TOOLS="$PROJECT_DIR/.build/tools"
RT_INSTALL="$PROJECT_DIR/.rt"
RT_BUNDLE="$TOOLS/ReleaseTools_Resources.bundle"
mkdir -p "$RT_INSTALL"
cp -r "$RT_BUNDLE/Configs/" "$RT_INSTALL"

# If a local .bin doesn't exist, link it to Extras/Scripts
# and link the built rt so that it can be found run from the command line
if [[ ! -e "$PROJECT_DIR/.bin" ]]
then
    ln -s "$PROJECT_DIR/Extras/Scripts" "$PROJECT_DIR/.bin"
    ln -sf "$TOOLS/rt" "$PROJECT_DIR/.bin/rt"
fi

ln -sf "$RT_BUNDLE/Scripts/upload" ".bin/upload"

mkdir -p "$BUILT_PRODUCTS_DIR"
"$TOOLS/rt" update-build --header "$BUILT_PRODUCTS_DIR/RTInfo.h" --repo "$SOURCE_ROOT"

$RT_LOG "Updated build number."
