#!/bin/sh

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Created by Sam Deane on 25/03/2020.
#  All code (c) 2020 - present day, Elegant Chaos Limited.
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# This script builds the rt command line tool and xcconfig files into local locations
# (`.build/tools.rt` and `.rt/` respectively), so that the rest of the scripts/targets
# can find them.
#
# It needs to be run once to bootstrap everything. After that, it should be run during
# each build.

# Instructions for use of this script:
# - copy this script into the client project
# - make a tools target in the client project
# - set this to be a dependency of the main target, so that it is built first
# - add a run script phase to the tools target which
#   - runs the local copy of this script
#   - runs the copy-to-client script

# The local build phase can run the two scripts it needs with the following lines:
#   "$PROJECT_DIR/Extras/Scripts/bootstrap-tools"
#Â   "$PROJECT_DIR/.build/tools/ReleaseTools_Resources.bundle/Scripts/copy-to-client"


set -euo pipefail  # (add an x to flags to enable debugging)

REBUILD=false
TOOLS="$PWD/.build/tools"
RT="$TOOLS/rt"
if [[ $REBUILD || (! -e "$RT") ]]
then
    LOCALTOOLS="$PWD/../ReleaseTools"
    if [[ -e "$LOCALTOOLS" ]]
    then
        pushd "$LOCALTOOLS" > /dev/null
    else
        TOOLSRC="$PWD/.build/tools/src"
        RTSRC="$TOOLSRC/ReleaseTools"
        if [[ ! -e "$RTSRC" ]]
        then
            echo "Cloning release tools."
            mkdir -p "$TOOLSRC"
            cd "$TOOLSRC"
            git clone git@github.com:elegantchaos/ReleaseTools.git
        fi
        pushd "$RTSRC" > /dev/null
        echo "Updating release tools."
        git checkout development
    fi

    swift build
    mkdir -p "$TOOLS"
    cp .build/debug/rt "$RT"
    cp -r .build/debug/ReleaseTools_Resources.bundle "$TOOLS/"
    popd > /dev/null
fi

RTV=`"$RT" --version`
echo "Using release tools $RTV."

